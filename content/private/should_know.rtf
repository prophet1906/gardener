{\rtf1\ansi\deff0\deflang2057\plain\fs24\fet1
{\fonttbl
{\f0\froman Arial;}
}
{\info
{\createim\yr2022\mo5\dy20\hr10\min55}
}

\paperw11907\paperh16840\margl1800\margr1800\margt1440\margb1440
\slmult0\ltrpar\li0
{\b\fs24
What every computer science major should know
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Theory
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Computational complexity
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
understand the difference between P, NP, NP-Hard and NP-Complete
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
models of computation
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
finite-state automata
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
regular languages (and regular expressions)
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
pushdown automata
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
context-free languages
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
formal grammars
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
Turing machines
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
lambda calculus
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
undecidability
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Architecture
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
understand a computer from the transistors up
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
standard levels of abstraction
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
transistors
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
gates
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
adders
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
adders
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
flip flops
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
ALUs
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
control units
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
caches
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
RAM
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
GPU model of high-performance computing
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
recommendations
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
design and simulate a small CPU
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
The Unix philosophy
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
emphasizes linguistic abstraction and composition in order to effect computation
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
command-line computing
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
IDE-less software development
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
text-file configuration
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
recommendations
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
navigate and manipulate the filesystem
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
compose processes with pipes
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
comfortably edit a file with emacs and vim
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
create, modify and execute a Makefile for a software project
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
write simple shell scripts
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
An engineering core
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
physics through electromagnetism
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
take up through multivariate calculus
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
differential equations
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
probability
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
linear algebra
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
statistics
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Parallelism
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
architecture
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
multicore
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
caches
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
buses
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
GPUs
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
CUDA
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
OpenCL
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
map-reduce
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Software engineering
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
version control
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
debugging tools
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Formal methods
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
be at least moderately comfortable using one theorem prover
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Graphics and simulation
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Simple ray tracers can be constructed in under 100 lines of code
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Data structures like BSP trees and algorithms like z-buffer rendering are great examples of clever design
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
It's good mental hygiene to work out the transformations necessary to perform a perspective 3D projection in a wireframe 3D engine
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Machine learning
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Bayesian networks
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
clustering
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
decision-tree learning
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Databases
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Relational algebra
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
relational calculus
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Technical communication
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Operating systems
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
recommendations
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
print "hello world" during the boot process
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
design their own scheduler
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
modify the page-handling policy
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
create their own filesystem
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
kernel
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
system calls
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
paging
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
scheduling
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
context-switching
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
filesystems
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
internal resource management
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Networking
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
network stack and routing protocols within a network
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
mechanics of building an efficient, reliable transmission protocol (like TCP) on top of an unreliable transmission protocol (like IP)
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
understand the trade-offs involved in protocol design--for example, when to choose TCP and when to choose UDP
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
understand exponential back off in packet collision resolution and the additive-increase multiplicative-decrease mechanism involved in congestion control
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
recommendations
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
protocols
}
\par\pard\plain
\slmult0\ltrpar\li800
{\fs20
802.3 and 802.11
}
\par\pard\plain
\slmult0\ltrpar\li800
{\fs20
IPv4 and IPv6
}
\par\pard\plain
\slmult0\ltrpar\li800
{\fs20
DNS, SMTP and HTTP
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
implement
}
\par\pard\plain
\slmult0\ltrpar\li800
{\fs20
an HTTP client and daemon
}
\par\pard\plain
\slmult0\ltrpar\li800
{\fs20
a DNS resolver and server
}
\par\pard\plain
\slmult0\ltrpar\li800
{\fs20
a command-line SMTP mailer
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
network sniffing w wireshark
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Software testing
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Security
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
social engineering
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
buffer overflows
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
integer overflow
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
code injection vulnerabilities
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
race conditions
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
privilige confusion
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Cryptography
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Understand
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
symmetric-key cryptosystems
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
public-key cryptosystems
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
secure hash functions
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
challenge-response authentication
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
digital signature algorithms
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
threshold cryptosystems
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
recommendations
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
breaking ciphertext using pre-modern cryptosystems with hand-rolled statistical tools
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
implemment RSA
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
create their own digital certificate and set up https in apache
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
write a console web client that connects over SSL
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
know how to use GPG
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
know how to use public-key authentication for ssh
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
know how to encrypt a directory or a hard disk
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Visualization
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
build a portfolio
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
publicly browsable code
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
per-project page
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
github or Google code
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
User experience design
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Discrete mathematics
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
formal mathematical notation
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
sets
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
tuples
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
sequences
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
functions
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
power sets
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
trees
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
graphs
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
formal languages
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
automata
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
learn enough number theory to study and implement common cryptographic protocols
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Programming languages
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
best way to learn how to learn progamming languages is to learn multiple programming languages and programming paradigms
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
difficulty of learning the nth language is half the difficulty of the (n-1)th
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
every computer science major should implement an interpreter
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Ideally, every computer science major would take a compilers class
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
specific languages
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
Racket (dialect of Lisp)
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
C
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
Javascript
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
Squeak
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
Java
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
Satandard ML
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
Prolog
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
Scala
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
Haskell
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
C++
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
Assembly
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
recommendations
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
generative programming (macros)
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
lexical (and dynamic) scope
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
closures
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
continuations
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
higher-order functions
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
dynamic dispatch
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
subtyping
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
modules and functors
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
monads as semantic concepts distinct from any specific syntax
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
http://matt.might.net/articles/what-cs-majors-should-know/
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Data structures and algorithms
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
how to design algorithms
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
greedy
}
\par\pard\plain
\slmult0\ltrpar\li600
{\fs20
dynamic strategies
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
know both the imperative and functional versions of each algorithm
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
hash tables
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
linked lists
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
trees
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
binary search trees
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
directed and undirected graphs
}
\par\pard\plain
\slmult0\ltrpar\li200
{\b\fs20
Systems administration
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Install and administer a Linux distribution
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Configure and compile the Linux kernel
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Troubleshoot a connection with dig, ping and traceroute
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Compile and configure a web server like apache
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Compile and configure a DNS daemon like bind
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Maintain a web site with a text editor
}
\par\pard\plain
\slmult0\ltrpar\li400
{\fs20
Cut and crimp a network cable
}
\par\pard\plain
}